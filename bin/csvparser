#!/usr/bin/env python
""" Parse data to the OEP

Usage:
  csvparser [options] DEFN DATA
  csvparser -h | --help

Examples:

  csvparser -s 'schemaname' -t 'tablename' --token 11549d0315c95cd2e011569b338e19efmm4 path/to/table_definition.json path/to/table_data.csv

Arguments:

  DEFN                 Path to a JSON-file containing the table definition.
  DATA                 Path to a CSV-file containing table data.

Options:

  -h --help                  Show this screen and exit.
  -s --schema=SCHEMA         Name of the OEP schema. [default: model_draft]
  -t --table=TABLE           Name of the OEP table. [default: buergen_test]
  -l --loglevel=LOGLEVEL     Set the loglevel. Should be one of DEBUG, INFO,
                             WARNING, ERROR or CRITICAL. [default: INFO]
     --srid=SRID             Set the SRID for column geom. [default: 25832]
     --token=TOKEN           Authentication token provided by the OEP.
     --sep=SEP               Delimiter used in CSV-files. [default: ,]

Notes:

    The geometry column has to be named geom.

"""

# arguments = {
#    "DATA" : "/home/martin/buergen/buergen_repository/buergen/data/Widerstand_Protestinhalt_Netzausbau.csv",
#    "DEFN" : "/home/martin/buergen/buergen_repository/buergen/data/Widerstand_Protestinhalt_Netzausbau.json",
#    "--schema" : "model_draft",
#    "--table" : "buergen_test",
#    "--token" : "",
#    "SEP" : ","}

import json
import logging
import pandas as pd
from docopt import docopt
from buergen.oep.parser import OepParser
from buergen.helper import yes_or_no
from django.contrib.gis.geos import GEOSGeometry


APIURL = "http://oep.iks.cs.ovgu.de/api/v0/"


def read_table_definition(**arguments):
    with open(arguments['DEFN'], 'r') as f:
        defn = json.load(f)
    return defn


def read_data(**arguments):

    def read_geom(i, clss):
        print(i)
        return clss(i, srid=int(arguments['--srid']))

    def series_to_boolean(s):
        BOOLEAN = {'JA': True, 'ja': True, 'Ja':True,
                'NEIN': False, 'nein': False, 'Nein':False}

        cond = set(s.isin(BOOLEAN.keys())) == {True}
        return s.replace(BOOLEAN) if cond else s

    df = pd.read_csv(arguments['DATA'], dtype=str)
    df = df.apply(series_to_boolean)

    if 'geom' in df:

        geoms = [GEOSGeometry(i, srid=int(arguments['--srid']))
                 for i in df.geom]

        # GEOSGeometry can handle geometries of different dimensions. To solve
        # mixed entries, e.g Point/Multipoint in the geometry column, which is
        # forbidden writing to the db, these entries have to be converted to
        # the higher dimension. This is done on the already instantiated
        # objects, but there should be a better way of doing this.
        typedict = GEOSGeometry._GEOS_CLASSES
        types = set([GEOSGeometry(i).geom_typeid for i in df.geom])

        if len(types) > 1:
            clss = typedict.get(max(types))
            geoms = [clss(i, srid=int(arguments['--srid'])) if
                     i.geom_typeid == min(types) else i for i in geoms]

        df.geom = [str(i) for i in geoms]

    return df


def main(**arguments):

    logging.info("Read table definition.")
    defn = read_table_definition(**arguments)

    logging.info("Read table data.")
    data = read_data(**arguments)

    p = OepParser(apiurl=APIURL,
                  schema=arguments['--schema'],
                  table=arguments['--table'],
                  token=arguments['--token'])

    if p.check_table_exists():

        logging.warning("Unfortunately table {} does already exist.".format(
            arguments['--table']))

        msg = "Do you want to delete it?"

        if yes_or_no(msg):
            p.delete_table()
            p.create_table(body=defn)
        else:
            quit()

    else:
        p.create_table(body=defn)

    data.columns = data.columns.str.lower()
    records = data.to_dict(orient='records')
    p.insert_into_table(body={'query': records})


if __name__ == '__main__':
    arguments = docopt(__doc__, version='v0.1')
    logging.basicConfig(level=arguments['--loglevel'],
                        format='%(levelname)s: %(message)s')
    logging.info('Starting parser!')
    main(**arguments)
    logging.info('Done!')
